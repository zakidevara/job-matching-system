/-- Query Import User dari JSON --/
CALL apoc.load.json("file:/dummy_dataset_user_v4.json") YIELD value AS user
MERGE (u:User {nim: toString(user.nim)})
SET u.email = user.email,
u.password = user.password,
u.name = user.name,
u.gender = user.gender,
u.birthDate = user.birthDate,
u.phoneNumber = user.phoneNumber,
u.studyProgram = user.studyProgram,
u.classYear = user.classYear,
u.status = 1
WITH u, user, user.skills AS skills
UNWIND skills as sk
MATCH (s:Skill {name: sk})
MERGE (u)-[:SKILLED_IN]->(s)
WITH user.religion AS religion
MATCH (r:Religion {id: religion})
MERGE (u)-[:HAS_RELIGION]->(r)


/-- Query Import Job dari JSON --/
CALL apoc.load.json("file:/dummy_dataset_job_v10.json") YIELD value AS job
MERGE (j:Job {id: toString(job.job_id)})
SET j.contact = job.contact,
j.title = job.title,
j.description = job.description,
j.quantity = job.quantity,
j.location = job.location,
j.endDate = '2021-08-10',
j.benefits = job.benefits,
j.duration = job.duration,
j.companyName = job.companyName,
j.remote = job.remote,
j.minSalary = job.minSalary,
j.maxSalary = job.maxSalary,
j.status = true
WITH j, job, job.jobType AS jtype
MERGE (jt:JobType {id: toString(jtype)})
MERGE (j)-[:CLASSIFIED]->(jt)
WITH j, job, job.perekrut AS perekrut 
MERGE (u:User {nim: toString(perekrut)})
MERGE (u)-[:POSTS]->(j)
WITH j, job, job.genderReq AS genderReq, job.descriptionAddition AS description
CREATE (jr:JobReq)
SET jr.genderReq = genderReq,
jr.description = description  
MERGE (j)-[:REQUIRES]->(jr) 
WITH jr, job, job.skills_req AS skills 
UNWIND skills as sk
MERGE (s:Skill {name: sk})   
MERGE (jr)-[:REQUIRES_SKILL]->(s)
WITH jr, job.religionReq AS religionReq WHERE religionReq IS NOT NULL
UNWIND religionReq as rr 
MATCH (r:Religion {id: rr})
MERGE (jr)-[:REQUIRES_RELIGION]->(r)


/-- Query Dadakan --/
CALL apoc.load.json("file:/dummy_dataset_job_v11.json") YIELD value AS job
MERGE (j:Job {id: toString(job.job_id)})
MERGE (jt:JobType {id: toString(job.jobType)})
MERGE (j)-[:CLASSIFIED]->(jt)





